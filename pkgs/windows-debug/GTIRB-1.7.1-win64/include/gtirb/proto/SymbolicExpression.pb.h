// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SymbolicExpression.proto

#ifndef PROTOBUF_INCLUDED_SymbolicExpression_2eproto
#define PROTOBUF_INCLUDED_SymbolicExpression_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_SymbolicExpression_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_SymbolicExpression_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_SymbolicExpression_2eproto();
namespace gtirb {
namespace proto {
class SymAddrAddr;
class SymAddrAddrDefaultTypeInternal;
extern SymAddrAddrDefaultTypeInternal _SymAddrAddr_default_instance_;
class SymAddrConst;
class SymAddrConstDefaultTypeInternal;
extern SymAddrConstDefaultTypeInternal _SymAddrConst_default_instance_;
class SymStackConst;
class SymStackConstDefaultTypeInternal;
extern SymStackConstDefaultTypeInternal _SymStackConst_default_instance_;
class SymbolicExpression;
class SymbolicExpressionDefaultTypeInternal;
extern SymbolicExpressionDefaultTypeInternal _SymbolicExpression_default_instance_;
}  // namespace proto
}  // namespace gtirb
namespace google {
namespace protobuf {
template<> ::gtirb::proto::SymAddrAddr* Arena::CreateMaybeMessage<::gtirb::proto::SymAddrAddr>(Arena*);
template<> ::gtirb::proto::SymAddrConst* Arena::CreateMaybeMessage<::gtirb::proto::SymAddrConst>(Arena*);
template<> ::gtirb::proto::SymStackConst* Arena::CreateMaybeMessage<::gtirb::proto::SymStackConst>(Arena*);
template<> ::gtirb::proto::SymbolicExpression* Arena::CreateMaybeMessage<::gtirb::proto::SymbolicExpression>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gtirb {
namespace proto {

// ===================================================================

class SymStackConst final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gtirb.proto.SymStackConst) */ {
 public:
  SymStackConst();
  virtual ~SymStackConst();

  SymStackConst(const SymStackConst& from);

  inline SymStackConst& operator=(const SymStackConst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SymStackConst(SymStackConst&& from) noexcept
    : SymStackConst() {
    *this = ::std::move(from);
  }

  inline SymStackConst& operator=(SymStackConst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SymStackConst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SymStackConst* internal_default_instance() {
    return reinterpret_cast<const SymStackConst*>(
               &_SymStackConst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(SymStackConst* other);
  friend void swap(SymStackConst& a, SymStackConst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SymStackConst* New() const final {
    return CreateMaybeMessage<SymStackConst>(nullptr);
  }

  SymStackConst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SymStackConst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SymStackConst& from);
  void MergeFrom(const SymStackConst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SymStackConst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes symbol_uuid = 2;
  void clear_symbol_uuid();
  static const int kSymbolUuidFieldNumber = 2;
  const ::std::string& symbol_uuid() const;
  void set_symbol_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_symbol_uuid(::std::string&& value);
  #endif
  void set_symbol_uuid(const char* value);
  void set_symbol_uuid(const void* value, size_t size);
  ::std::string* mutable_symbol_uuid();
  ::std::string* release_symbol_uuid();
  void set_allocated_symbol_uuid(::std::string* symbol_uuid);

  // int32 offset = 1;
  void clear_offset();
  static const int kOffsetFieldNumber = 1;
  ::google::protobuf::int32 offset() const;
  void set_offset(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gtirb.proto.SymStackConst)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr symbol_uuid_;
  ::google::protobuf::int32 offset_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SymbolicExpression_2eproto;
};
// -------------------------------------------------------------------

class SymAddrConst final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gtirb.proto.SymAddrConst) */ {
 public:
  SymAddrConst();
  virtual ~SymAddrConst();

  SymAddrConst(const SymAddrConst& from);

  inline SymAddrConst& operator=(const SymAddrConst& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SymAddrConst(SymAddrConst&& from) noexcept
    : SymAddrConst() {
    *this = ::std::move(from);
  }

  inline SymAddrConst& operator=(SymAddrConst&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SymAddrConst& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SymAddrConst* internal_default_instance() {
    return reinterpret_cast<const SymAddrConst*>(
               &_SymAddrConst_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(SymAddrConst* other);
  friend void swap(SymAddrConst& a, SymAddrConst& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SymAddrConst* New() const final {
    return CreateMaybeMessage<SymAddrConst>(nullptr);
  }

  SymAddrConst* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SymAddrConst>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SymAddrConst& from);
  void MergeFrom(const SymAddrConst& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SymAddrConst* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes symbol_uuid = 2;
  void clear_symbol_uuid();
  static const int kSymbolUuidFieldNumber = 2;
  const ::std::string& symbol_uuid() const;
  void set_symbol_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_symbol_uuid(::std::string&& value);
  #endif
  void set_symbol_uuid(const char* value);
  void set_symbol_uuid(const void* value, size_t size);
  ::std::string* mutable_symbol_uuid();
  ::std::string* release_symbol_uuid();
  void set_allocated_symbol_uuid(::std::string* symbol_uuid);

  // int64 offset = 1;
  void clear_offset();
  static const int kOffsetFieldNumber = 1;
  ::google::protobuf::int64 offset() const;
  void set_offset(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:gtirb.proto.SymAddrConst)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr symbol_uuid_;
  ::google::protobuf::int64 offset_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SymbolicExpression_2eproto;
};
// -------------------------------------------------------------------

class SymAddrAddr final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gtirb.proto.SymAddrAddr) */ {
 public:
  SymAddrAddr();
  virtual ~SymAddrAddr();

  SymAddrAddr(const SymAddrAddr& from);

  inline SymAddrAddr& operator=(const SymAddrAddr& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SymAddrAddr(SymAddrAddr&& from) noexcept
    : SymAddrAddr() {
    *this = ::std::move(from);
  }

  inline SymAddrAddr& operator=(SymAddrAddr&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SymAddrAddr& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SymAddrAddr* internal_default_instance() {
    return reinterpret_cast<const SymAddrAddr*>(
               &_SymAddrAddr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(SymAddrAddr* other);
  friend void swap(SymAddrAddr& a, SymAddrAddr& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SymAddrAddr* New() const final {
    return CreateMaybeMessage<SymAddrAddr>(nullptr);
  }

  SymAddrAddr* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SymAddrAddr>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SymAddrAddr& from);
  void MergeFrom(const SymAddrAddr& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SymAddrAddr* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes symbol1_uuid = 3;
  void clear_symbol1_uuid();
  static const int kSymbol1UuidFieldNumber = 3;
  const ::std::string& symbol1_uuid() const;
  void set_symbol1_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_symbol1_uuid(::std::string&& value);
  #endif
  void set_symbol1_uuid(const char* value);
  void set_symbol1_uuid(const void* value, size_t size);
  ::std::string* mutable_symbol1_uuid();
  ::std::string* release_symbol1_uuid();
  void set_allocated_symbol1_uuid(::std::string* symbol1_uuid);

  // bytes symbol2_uuid = 4;
  void clear_symbol2_uuid();
  static const int kSymbol2UuidFieldNumber = 4;
  const ::std::string& symbol2_uuid() const;
  void set_symbol2_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_symbol2_uuid(::std::string&& value);
  #endif
  void set_symbol2_uuid(const char* value);
  void set_symbol2_uuid(const void* value, size_t size);
  ::std::string* mutable_symbol2_uuid();
  ::std::string* release_symbol2_uuid();
  void set_allocated_symbol2_uuid(::std::string* symbol2_uuid);

  // int64 scale = 1;
  void clear_scale();
  static const int kScaleFieldNumber = 1;
  ::google::protobuf::int64 scale() const;
  void set_scale(::google::protobuf::int64 value);

  // int64 offset = 2;
  void clear_offset();
  static const int kOffsetFieldNumber = 2;
  ::google::protobuf::int64 offset() const;
  void set_offset(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:gtirb.proto.SymAddrAddr)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr symbol1_uuid_;
  ::google::protobuf::internal::ArenaStringPtr symbol2_uuid_;
  ::google::protobuf::int64 scale_;
  ::google::protobuf::int64 offset_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_SymbolicExpression_2eproto;
};
// -------------------------------------------------------------------

class SymbolicExpression final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gtirb.proto.SymbolicExpression) */ {
 public:
  SymbolicExpression();
  virtual ~SymbolicExpression();

  SymbolicExpression(const SymbolicExpression& from);

  inline SymbolicExpression& operator=(const SymbolicExpression& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SymbolicExpression(SymbolicExpression&& from) noexcept
    : SymbolicExpression() {
    *this = ::std::move(from);
  }

  inline SymbolicExpression& operator=(SymbolicExpression&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SymbolicExpression& default_instance();

  enum ValueCase {
    kStackConst = 1,
    kAddrConst = 2,
    kAddrAddr = 3,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SymbolicExpression* internal_default_instance() {
    return reinterpret_cast<const SymbolicExpression*>(
               &_SymbolicExpression_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(SymbolicExpression* other);
  friend void swap(SymbolicExpression& a, SymbolicExpression& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SymbolicExpression* New() const final {
    return CreateMaybeMessage<SymbolicExpression>(nullptr);
  }

  SymbolicExpression* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SymbolicExpression>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SymbolicExpression& from);
  void MergeFrom(const SymbolicExpression& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SymbolicExpression* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .gtirb.proto.SymStackConst stack_const = 1;
  bool has_stack_const() const;
  void clear_stack_const();
  static const int kStackConstFieldNumber = 1;
  const ::gtirb::proto::SymStackConst& stack_const() const;
  ::gtirb::proto::SymStackConst* release_stack_const();
  ::gtirb::proto::SymStackConst* mutable_stack_const();
  void set_allocated_stack_const(::gtirb::proto::SymStackConst* stack_const);

  // .gtirb.proto.SymAddrConst addr_const = 2;
  bool has_addr_const() const;
  void clear_addr_const();
  static const int kAddrConstFieldNumber = 2;
  const ::gtirb::proto::SymAddrConst& addr_const() const;
  ::gtirb::proto::SymAddrConst* release_addr_const();
  ::gtirb::proto::SymAddrConst* mutable_addr_const();
  void set_allocated_addr_const(::gtirb::proto::SymAddrConst* addr_const);

  // .gtirb.proto.SymAddrAddr addr_addr = 3;
  bool has_addr_addr() const;
  void clear_addr_addr();
  static const int kAddrAddrFieldNumber = 3;
  const ::gtirb::proto::SymAddrAddr& addr_addr() const;
  ::gtirb::proto::SymAddrAddr* release_addr_addr();
  ::gtirb::proto::SymAddrAddr* mutable_addr_addr();
  void set_allocated_addr_addr(::gtirb::proto::SymAddrAddr* addr_addr);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:gtirb.proto.SymbolicExpression)
 private:
  class HasBitSetters;
  void set_has_stack_const();
  void set_has_addr_const();
  void set_has_addr_addr();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union ValueUnion {
    ValueUnion() {}
    ::gtirb::proto::SymStackConst* stack_const_;
    ::gtirb::proto::SymAddrConst* addr_const_;
    ::gtirb::proto::SymAddrAddr* addr_addr_;
  } value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_SymbolicExpression_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SymStackConst

// int32 offset = 1;
inline void SymStackConst::clear_offset() {
  offset_ = 0;
}
inline ::google::protobuf::int32 SymStackConst::offset() const {
  // @@protoc_insertion_point(field_get:gtirb.proto.SymStackConst.offset)
  return offset_;
}
inline void SymStackConst::set_offset(::google::protobuf::int32 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:gtirb.proto.SymStackConst.offset)
}

// bytes symbol_uuid = 2;
inline void SymStackConst::clear_symbol_uuid() {
  symbol_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SymStackConst::symbol_uuid() const {
  // @@protoc_insertion_point(field_get:gtirb.proto.SymStackConst.symbol_uuid)
  return symbol_uuid_.GetNoArena();
}
inline void SymStackConst::set_symbol_uuid(const ::std::string& value) {
  
  symbol_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gtirb.proto.SymStackConst.symbol_uuid)
}
#if LANG_CXX11
inline void SymStackConst::set_symbol_uuid(::std::string&& value) {
  
  symbol_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gtirb.proto.SymStackConst.symbol_uuid)
}
#endif
inline void SymStackConst::set_symbol_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gtirb.proto.SymStackConst.symbol_uuid)
}
inline void SymStackConst::set_symbol_uuid(const void* value, size_t size) {
  
  symbol_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gtirb.proto.SymStackConst.symbol_uuid)
}
inline ::std::string* SymStackConst::mutable_symbol_uuid() {
  
  // @@protoc_insertion_point(field_mutable:gtirb.proto.SymStackConst.symbol_uuid)
  return symbol_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SymStackConst::release_symbol_uuid() {
  // @@protoc_insertion_point(field_release:gtirb.proto.SymStackConst.symbol_uuid)
  
  return symbol_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SymStackConst::set_allocated_symbol_uuid(::std::string* symbol_uuid) {
  if (symbol_uuid != nullptr) {
    
  } else {
    
  }
  symbol_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol_uuid);
  // @@protoc_insertion_point(field_set_allocated:gtirb.proto.SymStackConst.symbol_uuid)
}

// -------------------------------------------------------------------

// SymAddrConst

// int64 offset = 1;
inline void SymAddrConst::clear_offset() {
  offset_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 SymAddrConst::offset() const {
  // @@protoc_insertion_point(field_get:gtirb.proto.SymAddrConst.offset)
  return offset_;
}
inline void SymAddrConst::set_offset(::google::protobuf::int64 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:gtirb.proto.SymAddrConst.offset)
}

// bytes symbol_uuid = 2;
inline void SymAddrConst::clear_symbol_uuid() {
  symbol_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SymAddrConst::symbol_uuid() const {
  // @@protoc_insertion_point(field_get:gtirb.proto.SymAddrConst.symbol_uuid)
  return symbol_uuid_.GetNoArena();
}
inline void SymAddrConst::set_symbol_uuid(const ::std::string& value) {
  
  symbol_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gtirb.proto.SymAddrConst.symbol_uuid)
}
#if LANG_CXX11
inline void SymAddrConst::set_symbol_uuid(::std::string&& value) {
  
  symbol_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gtirb.proto.SymAddrConst.symbol_uuid)
}
#endif
inline void SymAddrConst::set_symbol_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gtirb.proto.SymAddrConst.symbol_uuid)
}
inline void SymAddrConst::set_symbol_uuid(const void* value, size_t size) {
  
  symbol_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gtirb.proto.SymAddrConst.symbol_uuid)
}
inline ::std::string* SymAddrConst::mutable_symbol_uuid() {
  
  // @@protoc_insertion_point(field_mutable:gtirb.proto.SymAddrConst.symbol_uuid)
  return symbol_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SymAddrConst::release_symbol_uuid() {
  // @@protoc_insertion_point(field_release:gtirb.proto.SymAddrConst.symbol_uuid)
  
  return symbol_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SymAddrConst::set_allocated_symbol_uuid(::std::string* symbol_uuid) {
  if (symbol_uuid != nullptr) {
    
  } else {
    
  }
  symbol_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol_uuid);
  // @@protoc_insertion_point(field_set_allocated:gtirb.proto.SymAddrConst.symbol_uuid)
}

// -------------------------------------------------------------------

// SymAddrAddr

// int64 scale = 1;
inline void SymAddrAddr::clear_scale() {
  scale_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 SymAddrAddr::scale() const {
  // @@protoc_insertion_point(field_get:gtirb.proto.SymAddrAddr.scale)
  return scale_;
}
inline void SymAddrAddr::set_scale(::google::protobuf::int64 value) {
  
  scale_ = value;
  // @@protoc_insertion_point(field_set:gtirb.proto.SymAddrAddr.scale)
}

// int64 offset = 2;
inline void SymAddrAddr::clear_offset() {
  offset_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 SymAddrAddr::offset() const {
  // @@protoc_insertion_point(field_get:gtirb.proto.SymAddrAddr.offset)
  return offset_;
}
inline void SymAddrAddr::set_offset(::google::protobuf::int64 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:gtirb.proto.SymAddrAddr.offset)
}

// bytes symbol1_uuid = 3;
inline void SymAddrAddr::clear_symbol1_uuid() {
  symbol1_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SymAddrAddr::symbol1_uuid() const {
  // @@protoc_insertion_point(field_get:gtirb.proto.SymAddrAddr.symbol1_uuid)
  return symbol1_uuid_.GetNoArena();
}
inline void SymAddrAddr::set_symbol1_uuid(const ::std::string& value) {
  
  symbol1_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gtirb.proto.SymAddrAddr.symbol1_uuid)
}
#if LANG_CXX11
inline void SymAddrAddr::set_symbol1_uuid(::std::string&& value) {
  
  symbol1_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gtirb.proto.SymAddrAddr.symbol1_uuid)
}
#endif
inline void SymAddrAddr::set_symbol1_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol1_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gtirb.proto.SymAddrAddr.symbol1_uuid)
}
inline void SymAddrAddr::set_symbol1_uuid(const void* value, size_t size) {
  
  symbol1_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gtirb.proto.SymAddrAddr.symbol1_uuid)
}
inline ::std::string* SymAddrAddr::mutable_symbol1_uuid() {
  
  // @@protoc_insertion_point(field_mutable:gtirb.proto.SymAddrAddr.symbol1_uuid)
  return symbol1_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SymAddrAddr::release_symbol1_uuid() {
  // @@protoc_insertion_point(field_release:gtirb.proto.SymAddrAddr.symbol1_uuid)
  
  return symbol1_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SymAddrAddr::set_allocated_symbol1_uuid(::std::string* symbol1_uuid) {
  if (symbol1_uuid != nullptr) {
    
  } else {
    
  }
  symbol1_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol1_uuid);
  // @@protoc_insertion_point(field_set_allocated:gtirb.proto.SymAddrAddr.symbol1_uuid)
}

// bytes symbol2_uuid = 4;
inline void SymAddrAddr::clear_symbol2_uuid() {
  symbol2_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SymAddrAddr::symbol2_uuid() const {
  // @@protoc_insertion_point(field_get:gtirb.proto.SymAddrAddr.symbol2_uuid)
  return symbol2_uuid_.GetNoArena();
}
inline void SymAddrAddr::set_symbol2_uuid(const ::std::string& value) {
  
  symbol2_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gtirb.proto.SymAddrAddr.symbol2_uuid)
}
#if LANG_CXX11
inline void SymAddrAddr::set_symbol2_uuid(::std::string&& value) {
  
  symbol2_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gtirb.proto.SymAddrAddr.symbol2_uuid)
}
#endif
inline void SymAddrAddr::set_symbol2_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  symbol2_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gtirb.proto.SymAddrAddr.symbol2_uuid)
}
inline void SymAddrAddr::set_symbol2_uuid(const void* value, size_t size) {
  
  symbol2_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gtirb.proto.SymAddrAddr.symbol2_uuid)
}
inline ::std::string* SymAddrAddr::mutable_symbol2_uuid() {
  
  // @@protoc_insertion_point(field_mutable:gtirb.proto.SymAddrAddr.symbol2_uuid)
  return symbol2_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SymAddrAddr::release_symbol2_uuid() {
  // @@protoc_insertion_point(field_release:gtirb.proto.SymAddrAddr.symbol2_uuid)
  
  return symbol2_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SymAddrAddr::set_allocated_symbol2_uuid(::std::string* symbol2_uuid) {
  if (symbol2_uuid != nullptr) {
    
  } else {
    
  }
  symbol2_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), symbol2_uuid);
  // @@protoc_insertion_point(field_set_allocated:gtirb.proto.SymAddrAddr.symbol2_uuid)
}

// -------------------------------------------------------------------

// SymbolicExpression

// .gtirb.proto.SymStackConst stack_const = 1;
inline bool SymbolicExpression::has_stack_const() const {
  return value_case() == kStackConst;
}
inline void SymbolicExpression::set_has_stack_const() {
  _oneof_case_[0] = kStackConst;
}
inline void SymbolicExpression::clear_stack_const() {
  if (has_stack_const()) {
    delete value_.stack_const_;
    clear_has_value();
  }
}
inline ::gtirb::proto::SymStackConst* SymbolicExpression::release_stack_const() {
  // @@protoc_insertion_point(field_release:gtirb.proto.SymbolicExpression.stack_const)
  if (has_stack_const()) {
    clear_has_value();
      ::gtirb::proto::SymStackConst* temp = value_.stack_const_;
    value_.stack_const_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gtirb::proto::SymStackConst& SymbolicExpression::stack_const() const {
  // @@protoc_insertion_point(field_get:gtirb.proto.SymbolicExpression.stack_const)
  return has_stack_const()
      ? *value_.stack_const_
      : *reinterpret_cast< ::gtirb::proto::SymStackConst*>(&::gtirb::proto::_SymStackConst_default_instance_);
}
inline ::gtirb::proto::SymStackConst* SymbolicExpression::mutable_stack_const() {
  if (!has_stack_const()) {
    clear_value();
    set_has_stack_const();
    value_.stack_const_ = CreateMaybeMessage< ::gtirb::proto::SymStackConst >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:gtirb.proto.SymbolicExpression.stack_const)
  return value_.stack_const_;
}

// .gtirb.proto.SymAddrConst addr_const = 2;
inline bool SymbolicExpression::has_addr_const() const {
  return value_case() == kAddrConst;
}
inline void SymbolicExpression::set_has_addr_const() {
  _oneof_case_[0] = kAddrConst;
}
inline void SymbolicExpression::clear_addr_const() {
  if (has_addr_const()) {
    delete value_.addr_const_;
    clear_has_value();
  }
}
inline ::gtirb::proto::SymAddrConst* SymbolicExpression::release_addr_const() {
  // @@protoc_insertion_point(field_release:gtirb.proto.SymbolicExpression.addr_const)
  if (has_addr_const()) {
    clear_has_value();
      ::gtirb::proto::SymAddrConst* temp = value_.addr_const_;
    value_.addr_const_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gtirb::proto::SymAddrConst& SymbolicExpression::addr_const() const {
  // @@protoc_insertion_point(field_get:gtirb.proto.SymbolicExpression.addr_const)
  return has_addr_const()
      ? *value_.addr_const_
      : *reinterpret_cast< ::gtirb::proto::SymAddrConst*>(&::gtirb::proto::_SymAddrConst_default_instance_);
}
inline ::gtirb::proto::SymAddrConst* SymbolicExpression::mutable_addr_const() {
  if (!has_addr_const()) {
    clear_value();
    set_has_addr_const();
    value_.addr_const_ = CreateMaybeMessage< ::gtirb::proto::SymAddrConst >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:gtirb.proto.SymbolicExpression.addr_const)
  return value_.addr_const_;
}

// .gtirb.proto.SymAddrAddr addr_addr = 3;
inline bool SymbolicExpression::has_addr_addr() const {
  return value_case() == kAddrAddr;
}
inline void SymbolicExpression::set_has_addr_addr() {
  _oneof_case_[0] = kAddrAddr;
}
inline void SymbolicExpression::clear_addr_addr() {
  if (has_addr_addr()) {
    delete value_.addr_addr_;
    clear_has_value();
  }
}
inline ::gtirb::proto::SymAddrAddr* SymbolicExpression::release_addr_addr() {
  // @@protoc_insertion_point(field_release:gtirb.proto.SymbolicExpression.addr_addr)
  if (has_addr_addr()) {
    clear_has_value();
      ::gtirb::proto::SymAddrAddr* temp = value_.addr_addr_;
    value_.addr_addr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gtirb::proto::SymAddrAddr& SymbolicExpression::addr_addr() const {
  // @@protoc_insertion_point(field_get:gtirb.proto.SymbolicExpression.addr_addr)
  return has_addr_addr()
      ? *value_.addr_addr_
      : *reinterpret_cast< ::gtirb::proto::SymAddrAddr*>(&::gtirb::proto::_SymAddrAddr_default_instance_);
}
inline ::gtirb::proto::SymAddrAddr* SymbolicExpression::mutable_addr_addr() {
  if (!has_addr_addr()) {
    clear_value();
    set_has_addr_addr();
    value_.addr_addr_ = CreateMaybeMessage< ::gtirb::proto::SymAddrAddr >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:gtirb.proto.SymbolicExpression.addr_addr)
  return value_.addr_addr_;
}

inline bool SymbolicExpression::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void SymbolicExpression::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline SymbolicExpression::ValueCase SymbolicExpression::value_case() const {
  return SymbolicExpression::ValueCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace gtirb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_SymbolicExpression_2eproto
