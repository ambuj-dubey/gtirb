// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CFG.proto

#ifndef PROTOBUF_INCLUDED_CFG_2eproto
#define PROTOBUF_INCLUDED_CFG_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_CFG_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_CFG_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_CFG_2eproto();
namespace gtirb {
namespace proto {
class CFG;
class CFGDefaultTypeInternal;
extern CFGDefaultTypeInternal _CFG_default_instance_;
class Edge;
class EdgeDefaultTypeInternal;
extern EdgeDefaultTypeInternal _Edge_default_instance_;
class EdgeLabel;
class EdgeLabelDefaultTypeInternal;
extern EdgeLabelDefaultTypeInternal _EdgeLabel_default_instance_;
}  // namespace proto
}  // namespace gtirb
namespace google {
namespace protobuf {
template<> ::gtirb::proto::CFG* Arena::CreateMaybeMessage<::gtirb::proto::CFG>(Arena*);
template<> ::gtirb::proto::Edge* Arena::CreateMaybeMessage<::gtirb::proto::Edge>(Arena*);
template<> ::gtirb::proto::EdgeLabel* Arena::CreateMaybeMessage<::gtirb::proto::EdgeLabel>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gtirb {
namespace proto {

enum EdgeType {
  Type_Branch = 0,
  Type_Call = 1,
  Type_Fallthrough = 2,
  Type_Return = 3,
  Type_Syscall = 4,
  Type_Sysret = 5,
  EdgeType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  EdgeType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool EdgeType_IsValid(int value);
const EdgeType EdgeType_MIN = Type_Branch;
const EdgeType EdgeType_MAX = Type_Sysret;
const int EdgeType_ARRAYSIZE = EdgeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EdgeType_descriptor();
inline const ::std::string& EdgeType_Name(EdgeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EdgeType_descriptor(), value);
}
inline bool EdgeType_Parse(
    const ::std::string& name, EdgeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EdgeType>(
    EdgeType_descriptor(), name, value);
}
// ===================================================================

class EdgeLabel final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gtirb.proto.EdgeLabel) */ {
 public:
  EdgeLabel();
  virtual ~EdgeLabel();

  EdgeLabel(const EdgeLabel& from);

  inline EdgeLabel& operator=(const EdgeLabel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EdgeLabel(EdgeLabel&& from) noexcept
    : EdgeLabel() {
    *this = ::std::move(from);
  }

  inline EdgeLabel& operator=(EdgeLabel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const EdgeLabel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EdgeLabel* internal_default_instance() {
    return reinterpret_cast<const EdgeLabel*>(
               &_EdgeLabel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(EdgeLabel* other);
  friend void swap(EdgeLabel& a, EdgeLabel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EdgeLabel* New() const final {
    return CreateMaybeMessage<EdgeLabel>(nullptr);
  }

  EdgeLabel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EdgeLabel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EdgeLabel& from);
  void MergeFrom(const EdgeLabel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EdgeLabel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool conditional = 1;
  void clear_conditional();
  static const int kConditionalFieldNumber = 1;
  bool conditional() const;
  void set_conditional(bool value);

  // bool direct = 2;
  void clear_direct();
  static const int kDirectFieldNumber = 2;
  bool direct() const;
  void set_direct(bool value);

  // .gtirb.proto.EdgeType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::gtirb::proto::EdgeType type() const;
  void set_type(::gtirb::proto::EdgeType value);

  // @@protoc_insertion_point(class_scope:gtirb.proto.EdgeLabel)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool conditional_;
  bool direct_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CFG_2eproto;
};
// -------------------------------------------------------------------

class Edge final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gtirb.proto.Edge) */ {
 public:
  Edge();
  virtual ~Edge();

  Edge(const Edge& from);

  inline Edge& operator=(const Edge& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Edge(Edge&& from) noexcept
    : Edge() {
    *this = ::std::move(from);
  }

  inline Edge& operator=(Edge&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Edge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Edge* internal_default_instance() {
    return reinterpret_cast<const Edge*>(
               &_Edge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Edge* other);
  friend void swap(Edge& a, Edge& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Edge* New() const final {
    return CreateMaybeMessage<Edge>(nullptr);
  }

  Edge* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Edge>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Edge& from);
  void MergeFrom(const Edge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Edge* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes source_uuid = 1;
  void clear_source_uuid();
  static const int kSourceUuidFieldNumber = 1;
  const ::std::string& source_uuid() const;
  void set_source_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_source_uuid(::std::string&& value);
  #endif
  void set_source_uuid(const char* value);
  void set_source_uuid(const void* value, size_t size);
  ::std::string* mutable_source_uuid();
  ::std::string* release_source_uuid();
  void set_allocated_source_uuid(::std::string* source_uuid);

  // bytes target_uuid = 2;
  void clear_target_uuid();
  static const int kTargetUuidFieldNumber = 2;
  const ::std::string& target_uuid() const;
  void set_target_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_target_uuid(::std::string&& value);
  #endif
  void set_target_uuid(const char* value);
  void set_target_uuid(const void* value, size_t size);
  ::std::string* mutable_target_uuid();
  ::std::string* release_target_uuid();
  void set_allocated_target_uuid(::std::string* target_uuid);

  // .gtirb.proto.EdgeLabel label = 5;
  bool has_label() const;
  void clear_label();
  static const int kLabelFieldNumber = 5;
  const ::gtirb::proto::EdgeLabel& label() const;
  ::gtirb::proto::EdgeLabel* release_label();
  ::gtirb::proto::EdgeLabel* mutable_label();
  void set_allocated_label(::gtirb::proto::EdgeLabel* label);

  // @@protoc_insertion_point(class_scope:gtirb.proto.Edge)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr source_uuid_;
  ::google::protobuf::internal::ArenaStringPtr target_uuid_;
  ::gtirb::proto::EdgeLabel* label_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CFG_2eproto;
};
// -------------------------------------------------------------------

class CFG final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gtirb.proto.CFG) */ {
 public:
  CFG();
  virtual ~CFG();

  CFG(const CFG& from);

  inline CFG& operator=(const CFG& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CFG(CFG&& from) noexcept
    : CFG() {
    *this = ::std::move(from);
  }

  inline CFG& operator=(CFG&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CFG& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CFG* internal_default_instance() {
    return reinterpret_cast<const CFG*>(
               &_CFG_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CFG* other);
  friend void swap(CFG& a, CFG& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CFG* New() const final {
    return CreateMaybeMessage<CFG>(nullptr);
  }

  CFG* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CFG>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CFG& from);
  void MergeFrom(const CFG& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CFG* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gtirb.proto.Edge edges = 2;
  int edges_size() const;
  void clear_edges();
  static const int kEdgesFieldNumber = 2;
  ::gtirb::proto::Edge* mutable_edges(int index);
  ::google::protobuf::RepeatedPtrField< ::gtirb::proto::Edge >*
      mutable_edges();
  const ::gtirb::proto::Edge& edges(int index) const;
  ::gtirb::proto::Edge* add_edges();
  const ::google::protobuf::RepeatedPtrField< ::gtirb::proto::Edge >&
      edges() const;

  // repeated bytes vertices = 3;
  int vertices_size() const;
  void clear_vertices();
  static const int kVerticesFieldNumber = 3;
  const ::std::string& vertices(int index) const;
  ::std::string* mutable_vertices(int index);
  void set_vertices(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_vertices(int index, ::std::string&& value);
  #endif
  void set_vertices(int index, const char* value);
  void set_vertices(int index, const void* value, size_t size);
  ::std::string* add_vertices();
  void add_vertices(const ::std::string& value);
  #if LANG_CXX11
  void add_vertices(::std::string&& value);
  #endif
  void add_vertices(const char* value);
  void add_vertices(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& vertices() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_vertices();

  // @@protoc_insertion_point(class_scope:gtirb.proto.CFG)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::gtirb::proto::Edge > edges_;
  ::google::protobuf::RepeatedPtrField<::std::string> vertices_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_CFG_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EdgeLabel

// bool conditional = 1;
inline void EdgeLabel::clear_conditional() {
  conditional_ = false;
}
inline bool EdgeLabel::conditional() const {
  // @@protoc_insertion_point(field_get:gtirb.proto.EdgeLabel.conditional)
  return conditional_;
}
inline void EdgeLabel::set_conditional(bool value) {
  
  conditional_ = value;
  // @@protoc_insertion_point(field_set:gtirb.proto.EdgeLabel.conditional)
}

// bool direct = 2;
inline void EdgeLabel::clear_direct() {
  direct_ = false;
}
inline bool EdgeLabel::direct() const {
  // @@protoc_insertion_point(field_get:gtirb.proto.EdgeLabel.direct)
  return direct_;
}
inline void EdgeLabel::set_direct(bool value) {
  
  direct_ = value;
  // @@protoc_insertion_point(field_set:gtirb.proto.EdgeLabel.direct)
}

// .gtirb.proto.EdgeType type = 3;
inline void EdgeLabel::clear_type() {
  type_ = 0;
}
inline ::gtirb::proto::EdgeType EdgeLabel::type() const {
  // @@protoc_insertion_point(field_get:gtirb.proto.EdgeLabel.type)
  return static_cast< ::gtirb::proto::EdgeType >(type_);
}
inline void EdgeLabel::set_type(::gtirb::proto::EdgeType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gtirb.proto.EdgeLabel.type)
}

// -------------------------------------------------------------------

// Edge

// bytes source_uuid = 1;
inline void Edge::clear_source_uuid() {
  source_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Edge::source_uuid() const {
  // @@protoc_insertion_point(field_get:gtirb.proto.Edge.source_uuid)
  return source_uuid_.GetNoArena();
}
inline void Edge::set_source_uuid(const ::std::string& value) {
  
  source_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gtirb.proto.Edge.source_uuid)
}
#if LANG_CXX11
inline void Edge::set_source_uuid(::std::string&& value) {
  
  source_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gtirb.proto.Edge.source_uuid)
}
#endif
inline void Edge::set_source_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gtirb.proto.Edge.source_uuid)
}
inline void Edge::set_source_uuid(const void* value, size_t size) {
  
  source_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gtirb.proto.Edge.source_uuid)
}
inline ::std::string* Edge::mutable_source_uuid() {
  
  // @@protoc_insertion_point(field_mutable:gtirb.proto.Edge.source_uuid)
  return source_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Edge::release_source_uuid() {
  // @@protoc_insertion_point(field_release:gtirb.proto.Edge.source_uuid)
  
  return source_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Edge::set_allocated_source_uuid(::std::string* source_uuid) {
  if (source_uuid != nullptr) {
    
  } else {
    
  }
  source_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_uuid);
  // @@protoc_insertion_point(field_set_allocated:gtirb.proto.Edge.source_uuid)
}

// bytes target_uuid = 2;
inline void Edge::clear_target_uuid() {
  target_uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Edge::target_uuid() const {
  // @@protoc_insertion_point(field_get:gtirb.proto.Edge.target_uuid)
  return target_uuid_.GetNoArena();
}
inline void Edge::set_target_uuid(const ::std::string& value) {
  
  target_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gtirb.proto.Edge.target_uuid)
}
#if LANG_CXX11
inline void Edge::set_target_uuid(::std::string&& value) {
  
  target_uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gtirb.proto.Edge.target_uuid)
}
#endif
inline void Edge::set_target_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gtirb.proto.Edge.target_uuid)
}
inline void Edge::set_target_uuid(const void* value, size_t size) {
  
  target_uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gtirb.proto.Edge.target_uuid)
}
inline ::std::string* Edge::mutable_target_uuid() {
  
  // @@protoc_insertion_point(field_mutable:gtirb.proto.Edge.target_uuid)
  return target_uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Edge::release_target_uuid() {
  // @@protoc_insertion_point(field_release:gtirb.proto.Edge.target_uuid)
  
  return target_uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Edge::set_allocated_target_uuid(::std::string* target_uuid) {
  if (target_uuid != nullptr) {
    
  } else {
    
  }
  target_uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_uuid);
  // @@protoc_insertion_point(field_set_allocated:gtirb.proto.Edge.target_uuid)
}

// .gtirb.proto.EdgeLabel label = 5;
inline bool Edge::has_label() const {
  return this != internal_default_instance() && label_ != nullptr;
}
inline void Edge::clear_label() {
  if (GetArenaNoVirtual() == nullptr && label_ != nullptr) {
    delete label_;
  }
  label_ = nullptr;
}
inline const ::gtirb::proto::EdgeLabel& Edge::label() const {
  const ::gtirb::proto::EdgeLabel* p = label_;
  // @@protoc_insertion_point(field_get:gtirb.proto.Edge.label)
  return p != nullptr ? *p : *reinterpret_cast<const ::gtirb::proto::EdgeLabel*>(
      &::gtirb::proto::_EdgeLabel_default_instance_);
}
inline ::gtirb::proto::EdgeLabel* Edge::release_label() {
  // @@protoc_insertion_point(field_release:gtirb.proto.Edge.label)
  
  ::gtirb::proto::EdgeLabel* temp = label_;
  label_ = nullptr;
  return temp;
}
inline ::gtirb::proto::EdgeLabel* Edge::mutable_label() {
  
  if (label_ == nullptr) {
    auto* p = CreateMaybeMessage<::gtirb::proto::EdgeLabel>(GetArenaNoVirtual());
    label_ = p;
  }
  // @@protoc_insertion_point(field_mutable:gtirb.proto.Edge.label)
  return label_;
}
inline void Edge::set_allocated_label(::gtirb::proto::EdgeLabel* label) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete label_;
  }
  if (label) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      label = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, label, submessage_arena);
    }
    
  } else {
    
  }
  label_ = label;
  // @@protoc_insertion_point(field_set_allocated:gtirb.proto.Edge.label)
}

// -------------------------------------------------------------------

// CFG

// repeated bytes vertices = 3;
inline int CFG::vertices_size() const {
  return vertices_.size();
}
inline void CFG::clear_vertices() {
  vertices_.Clear();
}
inline const ::std::string& CFG::vertices(int index) const {
  // @@protoc_insertion_point(field_get:gtirb.proto.CFG.vertices)
  return vertices_.Get(index);
}
inline ::std::string* CFG::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:gtirb.proto.CFG.vertices)
  return vertices_.Mutable(index);
}
inline void CFG::set_vertices(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gtirb.proto.CFG.vertices)
  vertices_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void CFG::set_vertices(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:gtirb.proto.CFG.vertices)
  vertices_.Mutable(index)->assign(std::move(value));
}
#endif
inline void CFG::set_vertices(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  vertices_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gtirb.proto.CFG.vertices)
}
inline void CFG::set_vertices(int index, const void* value, size_t size) {
  vertices_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gtirb.proto.CFG.vertices)
}
inline ::std::string* CFG::add_vertices() {
  // @@protoc_insertion_point(field_add_mutable:gtirb.proto.CFG.vertices)
  return vertices_.Add();
}
inline void CFG::add_vertices(const ::std::string& value) {
  vertices_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gtirb.proto.CFG.vertices)
}
#if LANG_CXX11
inline void CFG::add_vertices(::std::string&& value) {
  vertices_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:gtirb.proto.CFG.vertices)
}
#endif
inline void CFG::add_vertices(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  vertices_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gtirb.proto.CFG.vertices)
}
inline void CFG::add_vertices(const void* value, size_t size) {
  vertices_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gtirb.proto.CFG.vertices)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
CFG::vertices() const {
  // @@protoc_insertion_point(field_list:gtirb.proto.CFG.vertices)
  return vertices_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
CFG::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:gtirb.proto.CFG.vertices)
  return &vertices_;
}

// repeated .gtirb.proto.Edge edges = 2;
inline int CFG::edges_size() const {
  return edges_.size();
}
inline void CFG::clear_edges() {
  edges_.Clear();
}
inline ::gtirb::proto::Edge* CFG::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:gtirb.proto.CFG.edges)
  return edges_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::gtirb::proto::Edge >*
CFG::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:gtirb.proto.CFG.edges)
  return &edges_;
}
inline const ::gtirb::proto::Edge& CFG::edges(int index) const {
  // @@protoc_insertion_point(field_get:gtirb.proto.CFG.edges)
  return edges_.Get(index);
}
inline ::gtirb::proto::Edge* CFG::add_edges() {
  // @@protoc_insertion_point(field_add:gtirb.proto.CFG.edges)
  return edges_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gtirb::proto::Edge >&
CFG::edges() const {
  // @@protoc_insertion_point(field_list:gtirb.proto.CFG.edges)
  return edges_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace gtirb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gtirb::proto::EdgeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gtirb::proto::EdgeType>() {
  return ::gtirb::proto::EdgeType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_CFG_2eproto
