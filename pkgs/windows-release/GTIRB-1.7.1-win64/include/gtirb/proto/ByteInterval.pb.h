// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ByteInterval.proto

#ifndef PROTOBUF_INCLUDED_ByteInterval_2eproto
#define PROTOBUF_INCLUDED_ByteInterval_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "CodeBlock.pb.h"
#include "DataBlock.pb.h"
#include "SymbolicExpression.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ByteInterval_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_ByteInterval_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_ByteInterval_2eproto();
namespace gtirb {
namespace proto {
class Block;
class BlockDefaultTypeInternal;
extern BlockDefaultTypeInternal _Block_default_instance_;
class ByteInterval;
class ByteIntervalDefaultTypeInternal;
extern ByteIntervalDefaultTypeInternal _ByteInterval_default_instance_;
class ByteInterval_SymbolicExpressionsEntry_DoNotUse;
class ByteInterval_SymbolicExpressionsEntry_DoNotUseDefaultTypeInternal;
extern ByteInterval_SymbolicExpressionsEntry_DoNotUseDefaultTypeInternal _ByteInterval_SymbolicExpressionsEntry_DoNotUse_default_instance_;
}  // namespace proto
}  // namespace gtirb
namespace google {
namespace protobuf {
template<> ::gtirb::proto::Block* Arena::CreateMaybeMessage<::gtirb::proto::Block>(Arena*);
template<> ::gtirb::proto::ByteInterval* Arena::CreateMaybeMessage<::gtirb::proto::ByteInterval>(Arena*);
template<> ::gtirb::proto::ByteInterval_SymbolicExpressionsEntry_DoNotUse* Arena::CreateMaybeMessage<::gtirb::proto::ByteInterval_SymbolicExpressionsEntry_DoNotUse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gtirb {
namespace proto {

// ===================================================================

class Block final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gtirb.proto.Block) */ {
 public:
  Block();
  virtual ~Block();

  Block(const Block& from);

  inline Block& operator=(const Block& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Block(Block&& from) noexcept
    : Block() {
    *this = ::std::move(from);
  }

  inline Block& operator=(Block&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Block& default_instance();

  enum ValueCase {
    kCode = 2,
    kData = 3,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Block* internal_default_instance() {
    return reinterpret_cast<const Block*>(
               &_Block_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Block* other);
  friend void swap(Block& a, Block& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Block* New() const final {
    return CreateMaybeMessage<Block>(nullptr);
  }

  Block* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Block>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Block& from);
  void MergeFrom(const Block& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Block* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint64 offset = 1;
  void clear_offset();
  static const int kOffsetFieldNumber = 1;
  ::google::protobuf::uint64 offset() const;
  void set_offset(::google::protobuf::uint64 value);

  // .gtirb.proto.CodeBlock code = 2;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  const ::gtirb::proto::CodeBlock& code() const;
  ::gtirb::proto::CodeBlock* release_code();
  ::gtirb::proto::CodeBlock* mutable_code();
  void set_allocated_code(::gtirb::proto::CodeBlock* code);

  // .gtirb.proto.DataBlock data = 3;
  bool has_data() const;
  void clear_data();
  static const int kDataFieldNumber = 3;
  const ::gtirb::proto::DataBlock& data() const;
  ::gtirb::proto::DataBlock* release_data();
  ::gtirb::proto::DataBlock* mutable_data();
  void set_allocated_data(::gtirb::proto::DataBlock* data);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:gtirb.proto.Block)
 private:
  class HasBitSetters;
  void set_has_code();
  void set_has_data();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint64 offset_;
  union ValueUnion {
    ValueUnion() {}
    ::gtirb::proto::CodeBlock* code_;
    ::gtirb::proto::DataBlock* data_;
  } value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_ByteInterval_2eproto;
};
// -------------------------------------------------------------------

class ByteInterval_SymbolicExpressionsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ByteInterval_SymbolicExpressionsEntry_DoNotUse, 
    ::google::protobuf::uint64, ::gtirb::proto::SymbolicExpression,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<ByteInterval_SymbolicExpressionsEntry_DoNotUse, 
    ::google::protobuf::uint64, ::gtirb::proto::SymbolicExpression,
    ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  ByteInterval_SymbolicExpressionsEntry_DoNotUse();
  ByteInterval_SymbolicExpressionsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ByteInterval_SymbolicExpressionsEntry_DoNotUse& other);
  static const ByteInterval_SymbolicExpressionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ByteInterval_SymbolicExpressionsEntry_DoNotUse*>(&_ByteInterval_SymbolicExpressionsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ByteInterval final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gtirb.proto.ByteInterval) */ {
 public:
  ByteInterval();
  virtual ~ByteInterval();

  ByteInterval(const ByteInterval& from);

  inline ByteInterval& operator=(const ByteInterval& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ByteInterval(ByteInterval&& from) noexcept
    : ByteInterval() {
    *this = ::std::move(from);
  }

  inline ByteInterval& operator=(ByteInterval&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ByteInterval& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ByteInterval* internal_default_instance() {
    return reinterpret_cast<const ByteInterval*>(
               &_ByteInterval_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ByteInterval* other);
  friend void swap(ByteInterval& a, ByteInterval& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ByteInterval* New() const final {
    return CreateMaybeMessage<ByteInterval>(nullptr);
  }

  ByteInterval* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ByteInterval>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ByteInterval& from);
  void MergeFrom(const ByteInterval& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ByteInterval* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated .gtirb.proto.Block blocks = 2;
  int blocks_size() const;
  void clear_blocks();
  static const int kBlocksFieldNumber = 2;
  ::gtirb::proto::Block* mutable_blocks(int index);
  ::google::protobuf::RepeatedPtrField< ::gtirb::proto::Block >*
      mutable_blocks();
  const ::gtirb::proto::Block& blocks(int index) const;
  ::gtirb::proto::Block* add_blocks();
  const ::google::protobuf::RepeatedPtrField< ::gtirb::proto::Block >&
      blocks() const;

  // map<uint64, .gtirb.proto.SymbolicExpression> symbolic_expressions = 3;
  int symbolic_expressions_size() const;
  void clear_symbolic_expressions();
  static const int kSymbolicExpressionsFieldNumber = 3;
  const ::google::protobuf::Map< ::google::protobuf::uint64, ::gtirb::proto::SymbolicExpression >&
      symbolic_expressions() const;
  ::google::protobuf::Map< ::google::protobuf::uint64, ::gtirb::proto::SymbolicExpression >*
      mutable_symbolic_expressions();

  // bytes uuid = 1;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const void* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // bytes contents = 7;
  void clear_contents();
  static const int kContentsFieldNumber = 7;
  const ::std::string& contents() const;
  void set_contents(const ::std::string& value);
  #if LANG_CXX11
  void set_contents(::std::string&& value);
  #endif
  void set_contents(const char* value);
  void set_contents(const void* value, size_t size);
  ::std::string* mutable_contents();
  ::std::string* release_contents();
  void set_allocated_contents(::std::string* contents);

  // uint64 address = 5;
  void clear_address();
  static const int kAddressFieldNumber = 5;
  ::google::protobuf::uint64 address() const;
  void set_address(::google::protobuf::uint64 value);

  // uint64 size = 6;
  void clear_size();
  static const int kSizeFieldNumber = 6;
  ::google::protobuf::uint64 size() const;
  void set_size(::google::protobuf::uint64 value);

  // bool has_address = 4;
  void clear_has_address();
  static const int kHasAddressFieldNumber = 4;
  bool has_address() const;
  void set_has_address(bool value);

  // @@protoc_insertion_point(class_scope:gtirb.proto.ByteInterval)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::gtirb::proto::Block > blocks_;
  ::google::protobuf::internal::MapField<
      ByteInterval_SymbolicExpressionsEntry_DoNotUse,
      ::google::protobuf::uint64, ::gtirb::proto::SymbolicExpression,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT64,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > symbolic_expressions_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::internal::ArenaStringPtr contents_;
  ::google::protobuf::uint64 address_;
  ::google::protobuf::uint64 size_;
  bool has_address_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ByteInterval_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Block

// uint64 offset = 1;
inline void Block::clear_offset() {
  offset_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Block::offset() const {
  // @@protoc_insertion_point(field_get:gtirb.proto.Block.offset)
  return offset_;
}
inline void Block::set_offset(::google::protobuf::uint64 value) {
  
  offset_ = value;
  // @@protoc_insertion_point(field_set:gtirb.proto.Block.offset)
}

// .gtirb.proto.CodeBlock code = 2;
inline bool Block::has_code() const {
  return value_case() == kCode;
}
inline void Block::set_has_code() {
  _oneof_case_[0] = kCode;
}
inline ::gtirb::proto::CodeBlock* Block::release_code() {
  // @@protoc_insertion_point(field_release:gtirb.proto.Block.code)
  if (has_code()) {
    clear_has_value();
      ::gtirb::proto::CodeBlock* temp = value_.code_;
    value_.code_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gtirb::proto::CodeBlock& Block::code() const {
  // @@protoc_insertion_point(field_get:gtirb.proto.Block.code)
  return has_code()
      ? *value_.code_
      : *reinterpret_cast< ::gtirb::proto::CodeBlock*>(&::gtirb::proto::_CodeBlock_default_instance_);
}
inline ::gtirb::proto::CodeBlock* Block::mutable_code() {
  if (!has_code()) {
    clear_value();
    set_has_code();
    value_.code_ = CreateMaybeMessage< ::gtirb::proto::CodeBlock >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:gtirb.proto.Block.code)
  return value_.code_;
}

// .gtirb.proto.DataBlock data = 3;
inline bool Block::has_data() const {
  return value_case() == kData;
}
inline void Block::set_has_data() {
  _oneof_case_[0] = kData;
}
inline ::gtirb::proto::DataBlock* Block::release_data() {
  // @@protoc_insertion_point(field_release:gtirb.proto.Block.data)
  if (has_data()) {
    clear_has_value();
      ::gtirb::proto::DataBlock* temp = value_.data_;
    value_.data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::gtirb::proto::DataBlock& Block::data() const {
  // @@protoc_insertion_point(field_get:gtirb.proto.Block.data)
  return has_data()
      ? *value_.data_
      : *reinterpret_cast< ::gtirb::proto::DataBlock*>(&::gtirb::proto::_DataBlock_default_instance_);
}
inline ::gtirb::proto::DataBlock* Block::mutable_data() {
  if (!has_data()) {
    clear_value();
    set_has_data();
    value_.data_ = CreateMaybeMessage< ::gtirb::proto::DataBlock >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:gtirb.proto.Block.data)
  return value_.data_;
}

inline bool Block::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void Block::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline Block::ValueCase Block::value_case() const {
  return Block::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ByteInterval

// bytes uuid = 1;
inline void ByteInterval::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ByteInterval::uuid() const {
  // @@protoc_insertion_point(field_get:gtirb.proto.ByteInterval.uuid)
  return uuid_.GetNoArena();
}
inline void ByteInterval::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gtirb.proto.ByteInterval.uuid)
}
#if LANG_CXX11
inline void ByteInterval::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gtirb.proto.ByteInterval.uuid)
}
#endif
inline void ByteInterval::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gtirb.proto.ByteInterval.uuid)
}
inline void ByteInterval::set_uuid(const void* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gtirb.proto.ByteInterval.uuid)
}
inline ::std::string* ByteInterval::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:gtirb.proto.ByteInterval.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ByteInterval::release_uuid() {
  // @@protoc_insertion_point(field_release:gtirb.proto.ByteInterval.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ByteInterval::set_allocated_uuid(::std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:gtirb.proto.ByteInterval.uuid)
}

// repeated .gtirb.proto.Block blocks = 2;
inline int ByteInterval::blocks_size() const {
  return blocks_.size();
}
inline void ByteInterval::clear_blocks() {
  blocks_.Clear();
}
inline ::gtirb::proto::Block* ByteInterval::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:gtirb.proto.ByteInterval.blocks)
  return blocks_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::gtirb::proto::Block >*
ByteInterval::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:gtirb.proto.ByteInterval.blocks)
  return &blocks_;
}
inline const ::gtirb::proto::Block& ByteInterval::blocks(int index) const {
  // @@protoc_insertion_point(field_get:gtirb.proto.ByteInterval.blocks)
  return blocks_.Get(index);
}
inline ::gtirb::proto::Block* ByteInterval::add_blocks() {
  // @@protoc_insertion_point(field_add:gtirb.proto.ByteInterval.blocks)
  return blocks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gtirb::proto::Block >&
ByteInterval::blocks() const {
  // @@protoc_insertion_point(field_list:gtirb.proto.ByteInterval.blocks)
  return blocks_;
}

// map<uint64, .gtirb.proto.SymbolicExpression> symbolic_expressions = 3;
inline int ByteInterval::symbolic_expressions_size() const {
  return symbolic_expressions_.size();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint64, ::gtirb::proto::SymbolicExpression >&
ByteInterval::symbolic_expressions() const {
  // @@protoc_insertion_point(field_map:gtirb.proto.ByteInterval.symbolic_expressions)
  return symbolic_expressions_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint64, ::gtirb::proto::SymbolicExpression >*
ByteInterval::mutable_symbolic_expressions() {
  // @@protoc_insertion_point(field_mutable_map:gtirb.proto.ByteInterval.symbolic_expressions)
  return symbolic_expressions_.MutableMap();
}

// bool has_address = 4;
inline void ByteInterval::clear_has_address() {
  has_address_ = false;
}
inline bool ByteInterval::has_address() const {
  // @@protoc_insertion_point(field_get:gtirb.proto.ByteInterval.has_address)
  return has_address_;
}
inline void ByteInterval::set_has_address(bool value) {
  
  has_address_ = value;
  // @@protoc_insertion_point(field_set:gtirb.proto.ByteInterval.has_address)
}

// uint64 address = 5;
inline void ByteInterval::clear_address() {
  address_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ByteInterval::address() const {
  // @@protoc_insertion_point(field_get:gtirb.proto.ByteInterval.address)
  return address_;
}
inline void ByteInterval::set_address(::google::protobuf::uint64 value) {
  
  address_ = value;
  // @@protoc_insertion_point(field_set:gtirb.proto.ByteInterval.address)
}

// uint64 size = 6;
inline void ByteInterval::clear_size() {
  size_ = PROTOBUF_ULONGLONG(0);
}
inline ::google::protobuf::uint64 ByteInterval::size() const {
  // @@protoc_insertion_point(field_get:gtirb.proto.ByteInterval.size)
  return size_;
}
inline void ByteInterval::set_size(::google::protobuf::uint64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:gtirb.proto.ByteInterval.size)
}

// bytes contents = 7;
inline void ByteInterval::clear_contents() {
  contents_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ByteInterval::contents() const {
  // @@protoc_insertion_point(field_get:gtirb.proto.ByteInterval.contents)
  return contents_.GetNoArena();
}
inline void ByteInterval::set_contents(const ::std::string& value) {
  
  contents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gtirb.proto.ByteInterval.contents)
}
#if LANG_CXX11
inline void ByteInterval::set_contents(::std::string&& value) {
  
  contents_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gtirb.proto.ByteInterval.contents)
}
#endif
inline void ByteInterval::set_contents(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  contents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gtirb.proto.ByteInterval.contents)
}
inline void ByteInterval::set_contents(const void* value, size_t size) {
  
  contents_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gtirb.proto.ByteInterval.contents)
}
inline ::std::string* ByteInterval::mutable_contents() {
  
  // @@protoc_insertion_point(field_mutable:gtirb.proto.ByteInterval.contents)
  return contents_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ByteInterval::release_contents() {
  // @@protoc_insertion_point(field_release:gtirb.proto.ByteInterval.contents)
  
  return contents_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ByteInterval::set_allocated_contents(::std::string* contents) {
  if (contents != nullptr) {
    
  } else {
    
  }
  contents_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contents);
  // @@protoc_insertion_point(field_set_allocated:gtirb.proto.ByteInterval.contents)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace gtirb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_ByteInterval_2eproto
