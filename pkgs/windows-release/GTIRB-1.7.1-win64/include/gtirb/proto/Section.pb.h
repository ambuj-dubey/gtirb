// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Section.proto

#ifndef PROTOBUF_INCLUDED_Section_2eproto
#define PROTOBUF_INCLUDED_Section_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ByteInterval.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Section_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_Section_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_Section_2eproto();
namespace gtirb {
namespace proto {
class Section;
class SectionDefaultTypeInternal;
extern SectionDefaultTypeInternal _Section_default_instance_;
}  // namespace proto
}  // namespace gtirb
namespace google {
namespace protobuf {
template<> ::gtirb::proto::Section* Arena::CreateMaybeMessage<::gtirb::proto::Section>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace gtirb {
namespace proto {

enum SectionFlag {
  Section_Undefined = 0,
  Readable = 1,
  Writable = 2,
  Executable = 3,
  Loaded = 4,
  Initialized = 5,
  ThreadLocal = 6,
  SectionFlag_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  SectionFlag_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool SectionFlag_IsValid(int value);
const SectionFlag SectionFlag_MIN = Section_Undefined;
const SectionFlag SectionFlag_MAX = ThreadLocal;
const int SectionFlag_ARRAYSIZE = SectionFlag_MAX + 1;

const ::google::protobuf::EnumDescriptor* SectionFlag_descriptor();
inline const ::std::string& SectionFlag_Name(SectionFlag value) {
  return ::google::protobuf::internal::NameOfEnum(
    SectionFlag_descriptor(), value);
}
inline bool SectionFlag_Parse(
    const ::std::string& name, SectionFlag* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SectionFlag>(
    SectionFlag_descriptor(), name, value);
}
// ===================================================================

class Section final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:gtirb.proto.Section) */ {
 public:
  Section();
  virtual ~Section();

  Section(const Section& from);

  inline Section& operator=(const Section& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Section(Section&& from) noexcept
    : Section() {
    *this = ::std::move(from);
  }

  inline Section& operator=(Section&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Section& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Section* internal_default_instance() {
    return reinterpret_cast<const Section*>(
               &_Section_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Section* other);
  friend void swap(Section& a, Section& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Section* New() const final {
    return CreateMaybeMessage<Section>(nullptr);
  }

  Section* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Section>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Section& from);
  void MergeFrom(const Section& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Section* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .gtirb.proto.ByteInterval byte_intervals = 5;
  int byte_intervals_size() const;
  void clear_byte_intervals();
  static const int kByteIntervalsFieldNumber = 5;
  ::gtirb::proto::ByteInterval* mutable_byte_intervals(int index);
  ::google::protobuf::RepeatedPtrField< ::gtirb::proto::ByteInterval >*
      mutable_byte_intervals();
  const ::gtirb::proto::ByteInterval& byte_intervals(int index) const;
  ::gtirb::proto::ByteInterval* add_byte_intervals();
  const ::google::protobuf::RepeatedPtrField< ::gtirb::proto::ByteInterval >&
      byte_intervals() const;

  // repeated .gtirb.proto.SectionFlag section_flags = 6;
  int section_flags_size() const;
  void clear_section_flags();
  static const int kSectionFlagsFieldNumber = 6;
  ::gtirb::proto::SectionFlag section_flags(int index) const;
  void set_section_flags(int index, ::gtirb::proto::SectionFlag value);
  void add_section_flags(::gtirb::proto::SectionFlag value);
  const ::google::protobuf::RepeatedField<int>& section_flags() const;
  ::google::protobuf::RepeatedField<int>* mutable_section_flags();

  // bytes uuid = 1;
  void clear_uuid();
  static const int kUuidFieldNumber = 1;
  const ::std::string& uuid() const;
  void set_uuid(const ::std::string& value);
  #if LANG_CXX11
  void set_uuid(::std::string&& value);
  #endif
  void set_uuid(const char* value);
  void set_uuid(const void* value, size_t size);
  ::std::string* mutable_uuid();
  ::std::string* release_uuid();
  void set_allocated_uuid(::std::string* uuid);

  // string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:gtirb.proto.Section)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::gtirb::proto::ByteInterval > byte_intervals_;
  ::google::protobuf::RepeatedField<int> section_flags_;
  mutable std::atomic<int> _section_flags_cached_byte_size_;
  ::google::protobuf::internal::ArenaStringPtr uuid_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Section_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Section

// bytes uuid = 1;
inline void Section::clear_uuid() {
  uuid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Section::uuid() const {
  // @@protoc_insertion_point(field_get:gtirb.proto.Section.uuid)
  return uuid_.GetNoArena();
}
inline void Section::set_uuid(const ::std::string& value) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gtirb.proto.Section.uuid)
}
#if LANG_CXX11
inline void Section::set_uuid(::std::string&& value) {
  
  uuid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gtirb.proto.Section.uuid)
}
#endif
inline void Section::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gtirb.proto.Section.uuid)
}
inline void Section::set_uuid(const void* value, size_t size) {
  
  uuid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gtirb.proto.Section.uuid)
}
inline ::std::string* Section::mutable_uuid() {
  
  // @@protoc_insertion_point(field_mutable:gtirb.proto.Section.uuid)
  return uuid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Section::release_uuid() {
  // @@protoc_insertion_point(field_release:gtirb.proto.Section.uuid)
  
  return uuid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Section::set_allocated_uuid(::std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), uuid);
  // @@protoc_insertion_point(field_set_allocated:gtirb.proto.Section.uuid)
}

// string name = 2;
inline void Section::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Section::name() const {
  // @@protoc_insertion_point(field_get:gtirb.proto.Section.name)
  return name_.GetNoArena();
}
inline void Section::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gtirb.proto.Section.name)
}
#if LANG_CXX11
inline void Section::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gtirb.proto.Section.name)
}
#endif
inline void Section::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gtirb.proto.Section.name)
}
inline void Section::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gtirb.proto.Section.name)
}
inline ::std::string* Section::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:gtirb.proto.Section.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Section::release_name() {
  // @@protoc_insertion_point(field_release:gtirb.proto.Section.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Section::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:gtirb.proto.Section.name)
}

// repeated .gtirb.proto.ByteInterval byte_intervals = 5;
inline int Section::byte_intervals_size() const {
  return byte_intervals_.size();
}
inline ::gtirb::proto::ByteInterval* Section::mutable_byte_intervals(int index) {
  // @@protoc_insertion_point(field_mutable:gtirb.proto.Section.byte_intervals)
  return byte_intervals_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::gtirb::proto::ByteInterval >*
Section::mutable_byte_intervals() {
  // @@protoc_insertion_point(field_mutable_list:gtirb.proto.Section.byte_intervals)
  return &byte_intervals_;
}
inline const ::gtirb::proto::ByteInterval& Section::byte_intervals(int index) const {
  // @@protoc_insertion_point(field_get:gtirb.proto.Section.byte_intervals)
  return byte_intervals_.Get(index);
}
inline ::gtirb::proto::ByteInterval* Section::add_byte_intervals() {
  // @@protoc_insertion_point(field_add:gtirb.proto.Section.byte_intervals)
  return byte_intervals_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::gtirb::proto::ByteInterval >&
Section::byte_intervals() const {
  // @@protoc_insertion_point(field_list:gtirb.proto.Section.byte_intervals)
  return byte_intervals_;
}

// repeated .gtirb.proto.SectionFlag section_flags = 6;
inline int Section::section_flags_size() const {
  return section_flags_.size();
}
inline void Section::clear_section_flags() {
  section_flags_.Clear();
}
inline ::gtirb::proto::SectionFlag Section::section_flags(int index) const {
  // @@protoc_insertion_point(field_get:gtirb.proto.Section.section_flags)
  return static_cast< ::gtirb::proto::SectionFlag >(section_flags_.Get(index));
}
inline void Section::set_section_flags(int index, ::gtirb::proto::SectionFlag value) {
  section_flags_.Set(index, value);
  // @@protoc_insertion_point(field_set:gtirb.proto.Section.section_flags)
}
inline void Section::add_section_flags(::gtirb::proto::SectionFlag value) {
  section_flags_.Add(value);
  // @@protoc_insertion_point(field_add:gtirb.proto.Section.section_flags)
}
inline const ::google::protobuf::RepeatedField<int>&
Section::section_flags() const {
  // @@protoc_insertion_point(field_list:gtirb.proto.Section.section_flags)
  return section_flags_;
}
inline ::google::protobuf::RepeatedField<int>*
Section::mutable_section_flags() {
  // @@protoc_insertion_point(field_mutable_list:gtirb.proto.Section.section_flags)
  return &section_flags_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace gtirb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::gtirb::proto::SectionFlag> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::gtirb::proto::SectionFlag>() {
  return ::gtirb::proto::SectionFlag_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_Section_2eproto
